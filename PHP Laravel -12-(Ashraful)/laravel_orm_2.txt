
#one to many relationship.....
---------------------------------------
Model => User
---------------

public function addresses(){
        return $this->hasMany(Address::class,'user_id','id'); //return $this->hasMany(Address::class,'Address_table_col=>user_id','User_table_col =>id');
    }

---------------------------------------
Model => Address
---------------

 public function user(){
        return $this->belongsTo(User::class);  // if we can't mention fk then autometicall get 'id' as pk.
    }

--------------------------------------
web.route=>
------------------

Route::get('/check', function(){

    $users = User::with('addresses')->get();
    // $addresses = Address::with('user')->get();

    // echo "<pre>";


    // foreach ($users as $user) {
    //     dd($user->address->country);
    // }


    // foreach ($addresses as $address) {
    //     dd($address->user->name);
    // }

    // $users['1']->addresses()->create([
    //     'country'=> "Nepal",
    // ]);

    dd($users['1']);

    return view('users.index', compact('users'));
});
--------------------------------------
index.blade.php =>
--------------------------------------


  @foreach ($users as $user)
                        <p class="fs-5">{{ $user->name }}</p>
                        @foreach ($user->addresses as $address)
                            <p>{{$address->country}}</p>
                        @endforeach
                    @endforeach
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
===================================================================ORM filter method============================================================================================================================
#if one_column is null in Table of DB, then we get error trying to get object ! for fix this issue we can use laravel helper method .

suppose we want to fetch country from user->name, if this column is null then we can use  ... optional{{($user->name)}}.

  @foreach ($users as $user)
                        <p class="fs-5">{{ optional($user->name)}}</p>  <------------using hte helper function---------------->
                        @foreach ($user->addresses as $address)
                            <p>{{$address->country}}</p>
                        @endforeach
                    @endforeach
------------------------------another way to set the user name as default:return $this->belongsTo(User::class)->withDefault(['name'=>'Guest_User',]);  ------------------------------------

Model :: Address =>
======================

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Address extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'country',
    ];

    public function user(){
        return $this->belongsTo(User::class)->withDefault([
            'name'=>'Guest_User',
        ]);
    }



}
====================================ORM filter method: has()->==============================================

fetch those  user , who has country

$user = User::has('addresses')->get();

#for optimize sql query => $user = User::has('addresses')->with('addresses')->get();

#fetch those user has 2 or more post => $user = User::has('addresses','>=', 2)->get(); | here addresses() is the method of User model .

# suppose user has country with 'ABC' in country_title ex:'canadaABC' . for find the user with the title of ABC => $user = User::WhereHas('country',function($query){ $query->where('country' 'like' '%ABC%') })->get();

# if any user haven't any country name , for find those user => $user = User::doesntHave('address')->get();
=============================================================================================================
