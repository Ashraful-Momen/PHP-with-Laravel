#create the queue for the jobs for uploading the data as job batching : 
----------------------------------------------------------------------

#create a queue table for handing the queue with the table >>> php artisan queue:table 

#after creating the table then migrate >>> php artisan migrate. 

#Now make the jobs for jobs batching . >>> pa make:jobs PersonCsvProcess  or >>> php artisan make:job PersonCsvProcess. 

# now find : PersonCsvProcess >>>> copy all function of store then paste it to the handle() in PersonCsvProcess. 

# goto .env file > wirte database to =>    "QUEUE_CONNECTION=database"

# trigger the queue work => php artisan queue:work . 

if code queue:work is not working then , >>> php artisan optimize:clear. and run the route , then run the tigger command . 

============================================================================
route: 
--------
<?php

// use GuzzleHttp\Psr7\Request;

use App\Http\Controllers\PersonController;
use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;


Route::get('/', function () {
    // return "This is the Laravel Jobs and Queue Project";
    return view('welcome');
});

Route::post('/mycsv',[PersonController::class,'jobs_queue'])->name('mycsv');

Route::get('/store-data',[PersonController::class,'store'])->name('store');

============================================================================
Controllers: 
-------------
<?php

namespace App\Http\Controllers;

use App\Jobs\PersonCsvProcess;
use App\PersonDB;
use Illuminate\Http\Request;

class PersonController extends Controller
{

    function jobs_queue(Request $request)
    {

        // $data =  array_map('str_getcsv', file($request->mycsv)); // this function make the csv file content in associative array....

        // dd($request->all());
        $data = file($request->mycsv);

        // dd($data);

        $header = $data[0];

        unset($data[0]);

        //array chunk : big array split inot small array .

        $chunks = array_chunk($data, 100); // (full_array, size_of_array_100_per_csv); 1000 records keep into 10 csv file , per csv file store 100 array .



        // dd(count($chunks)); // mycsf = 1000 , after chunk we get total 10 csv file , 10*100 = 1000.




        foreach ($chunks as $key => $chunk) {
            $name = "/tmp{$key}.csv";  //temp1.csv , ... create total 10, cause $chunks = 10.

            $path = resource_path('temp');  // resuorce/temp/file_name....

            // ----------------------------------------------------
            // Define the path to the temp directory inside resources
            $tempDirectory = resource_path('temp');

            // Check if the directory doesn't exist, then create it
            if (!file_exists($tempDirectory)) {
                mkdir($tempDirectory, 0755, true); // The third parameter true ensures recursive directory creation
                echo "Directory created successfully!";
            } else {
                echo "Directory already exists!";
            }
            // ----------------------------------------------------

            // return $path.$name; //  -> /home/ashraful/Laravel7/Larave_jobs_queue/laravel_jobs_queue/resources/temp/tmp0.csv

            file_put_contents($path . $name, $chunk);  //convert 1000 records into 10 csv file. with the file_put_contents().

        }




        // foreach ($data as $key=>$value) {

        //     $person = array_combine($header, $value);   //header_name = value
        //     PersonDB::create($person); // insert the data to the database ;


        // }

        return "file upload and create the csv file done";
    }


    // store all the csv files data into the data base .--------------------------------------------

    public function store()
    {

        PersonCsvProcess::dispatch();

       
    }
}

============================================================================
jobs: 
--------
<?php

namespace App\Jobs;

use App\PersonDB;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class PersonCsvProcess implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        //copy form the store function ().

        $path = resource_path('temp'); // select the resource / temp , folder.

        $files = glob("$path/*.csv"); // select all the csv files form the directory.

        $header = [];

        foreach ($files as $key => $file) { // $files = 10 , so the loop iteration 10 times .

            $data = array_map('str_getcsv', file($file)); // get array form the csv1,csv2,.... file.

            if ($key === 0) {

                $header = $data[0]; // select the coloumn => first_name , last_name , email .

                unset($data[0]); //remove the header.

            }

            //now store the data to DB : --------------------------------

            foreach ($data as $person) {

                $personData = array_combine($header, $person);

                PersonDB::create($personData);
            }

            // unlink($file); // delet the file .
        }
        return "Store Successfully";
    }
}

============================================================================
================================Multiple jobs for completing the work ============================================
============================================================================
Controller: 
------------
<?php

namespace App\Http\Controllers;

use App\Jobs\PersonCsvProcess;
use App\PersonDB;
use Illuminate\Http\Request;

class PersonController extends Controller
{

    function jobs_queue(Request $request)
    {

        // $data =  array_map('str_getcsv', file($request->mycsv)); // this function make the csv file content in associative array....

        // dd($request->all());
        $data = file($request->mycsv);

        // dd($data);

        $header = $data[0];

        unset($data[0]);

        //array chunk : big array split inot small array .

        $chunks = array_chunk($data, 1000); // (full_array, size_of_array_100_per_csv); 1000 records keep into 10 csv file , per csv file store 100 array .



        // dd(count($chunks)); // mycsf = 1000 , after chunk we get total 10 csv file , 10*100 = 1000.




        foreach ($chunks as $key => $chunk) {
            $name = "/tmp{$key}.csv";  //temp1.csv , ... create total 10, cause $chunks = 10.

            $path = resource_path('temp');  // resuorce/temp/file_name....

            // ----------------------------------------------------
            // Define the path to the temp directory inside resources
            $tempDirectory = resource_path('temp');

            // Check if the directory doesn't exist, then create it
            if (!file_exists($tempDirectory)) {
                mkdir($tempDirectory, 0755, true); // The third parameter true ensures recursive directory creation
                echo "Directory created successfully!";
            } else {
                echo "Directory already exists!";
            }
            // ----------------------------------------------------

            // return $path.$name; //  -> /home/ashraful/Laravel7/Larave_jobs_queue/laravel_jobs_queue/resources/temp/tmp0.csv

            file_put_contents($path . $name, $chunk);  //convert 1000 records into 10 csv file. with the file_put_contents().

        }




        // foreach ($data as $key=>$value) {

        //     $person = array_combine($header, $value);   //header_name = value
        //     PersonDB::create($person); // insert the data to the database ;


        // }

        return "file upload and create the csv file done";
    }


    // store all the csv files data into the data base .--------------------------------------------

    public function store()
    {

        $path = resource_path('temp'); // select the resource / temp , folder.

        $files = glob("$path/*.csv"); // select all the csv files form the directory.

        $header = [];

        foreach ($files as $key => $file) { // $files = 10 , so the loop iteration 10 times .

            $data = array_map('str_getcsv', file($file)); // get array form the csv1,csv2,.... file.

            if ($key === 0) {

                $header = $data[0]; // select the coloumn => first_name , last_name , email .

                unset($data[0]); //remove the header.

            }

            PersonCsvProcess::dispatch($data,$header);



            unlink($file); // delet the file .
        }

        // return "Store Successfully";

        // PersonCsvProcess::dispatch();


    }
}

============================================================================
jobs: 
--------
<?php

namespace App\Jobs;

use App\PersonDB;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class PersonCsvProcess implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $data,$header; //from controller firt pass the $data , then $header


    public function __construct($data,$header)
    {
        //
        $this->data = $data;
        $this->header = $header;
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {

        // dd($this->data,$this->header);
        //copy form the store function ().

       //now store the data to DB : --------------------------------

       foreach ($this->data as $person) {

        $personData = array_combine($this->header, $person); //fix the error : from controller firt pass the $data , then $header

        PersonDB::create($personData);
    }

        // return "Data store successfully from multiple jobs . ";
    }
}

============================================================================
and the route : as same as like previous. 

