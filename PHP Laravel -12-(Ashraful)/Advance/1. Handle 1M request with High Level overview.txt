// routes/api.php
<?php

use App\Http\Controllers\Api\UserController;

Route::post('/user_reg', [UserController::class, 'register']);
Route::get('/registration/status/{requestId}', [UserController::class, 'checkStatus']);

// app/Http/Controllers/Api/UserController.php
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\UserRegistrationRequest;
use App\Jobs\ProcessUserRegistration;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Str;
use Illuminate\Http\Response;

class UserController extends Controller
{
    public function register(UserRegistrationRequest $request)
    {
        try {
            // Generate unique request ID
            $requestId = Str::uuid()->toString();

            // Prepare user data
            $userData = [
                'name' => $request->name,
                'phone' => $request->phone,
                'email' => $request->email,
                'gender' => $request->gender,
                'status' => 'pending',
                'created_at' => now()
            ];

            // Store in Redis with 24 hour expiration
            Redis::setex(
                "user_registration:{$requestId}",
                86400,
                json_encode($userData)
            );

            // Dispatch job to queue
            ProcessUserRegistration::dispatch($requestId)
                ->onQueue('registrations');

            return response()->json([
                'success' => true,
                'message' => 'Registration initiated successfully',
                'request_id' => $requestId
            ], Response::HTTP_ACCEPTED);

        } catch (\Exception $e) {
            \Log::error('Registration Error: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Registration failed'
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function checkStatus(string $requestId)
    {
        $data = Redis::get("user_registration:{$requestId}");

        if (!$data) {
            return response()->json([
                'success' => false,
                'message' => 'Registration not found'
            ], Response::HTTP_NOT_FOUND);
        }

        $userData = json_decode($data, true);

        return response()->json([
            'success' => true,
            'status' => $userData['status'],
            'message' => $userData['message'] ?? null
        ]);
    }
}

// app/Http/Requests/UserRegistrationRequest.php
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Exceptions\HttpResponseException;

class UserRegistrationRequest extends FormRequest
{
    public function rules()
    {
        return [
            'name' => 'required|string|max:255',
            'phone' => 'required|string|unique:users,phone',
            'email' => 'required|email|unique:users,email',
            'gender' => 'required|in:male,female,other'
        ];
    }

    protected function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(
            response()->json([
                'success' => false,
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422)
        );
    }
}

// app/Models/User.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    protected $fillable = [
        'name',
        'email',
        'phone',
        'gender'
    ];
}

// app/Jobs/ProcessUserRegistration.php
<?php

namespace App\Jobs;

use App\Models\User;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\DB;

class ProcessUserRegistration implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    private $requestId;
    public $tries = 3;
    public $timeout = 30;

    public function __construct($requestId)
    {
        $this->requestId = $requestId;
    }

    public function handle()
    {
        $key = "user_registration:{$this->requestId}";
        $userData = Redis::get($key);

        if (!$userData) {
            return;
        }

        $userData = json_decode($userData, true);

        try {
            DB::beginTransaction();

            // Check again for unique email/phone
            if (User::where('email', $userData['email'])
                    ->orWhere('phone', $userData['phone'])
                    ->exists()) {
                throw new \Exception('Email or phone already registered');
            }

            User::create([
                'name' => $userData['name'],
                'phone' => $userData['phone'],
                'email' => $userData['email'],
                'gender' => $userData['gender']
            ]);

            $userData['status'] = 'completed';
            $userData['message'] = 'Registration successful';
            
            DB::commit();

        } catch (\Exception $e) {
            DB::rollBack();
            
            $userData['status'] = 'failed';
            $userData['message'] = $e->getMessage();
            
            \Log::error("Registration failed for request {$this->requestId}: " . $e->getMessage());
        }

        Redis::setex($key, 86400, json_encode($userData));
    }
}

// database/migrations/xxxx_xx_xx_create_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone')->unique();
            $table->enum('gender', ['male', 'female', 'other']);
            $table->timestamps();
            
            // Add indexes for better performance
            $table->index(['email', 'phone']);
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
};

// .env configuration
APP_NAME=Laravel
APP_ENV=production
APP_KEY=base64:your-key-here
APP_DEBUG=false

DB_CONNECTION=mysql
DB_HOST=your-db-host
DB_PORT=3306
DB_DATABASE=your_database
DB_USERNAME=your_username
DB_PASSWORD=your_password

REDIS_HOST=your-redis-host
REDIS_PASSWORD=null
REDIS_PORT=6379
REDIS_CLIENT=predis

QUEUE_CONNECTION=redis
REDIS_QUEUE=registrations

# Multiple Redis instances for different purposes
REDIS_HOST_CACHE=redis-cache
REDIS_HOST_QUEUE=redis-queue
REDIS_HOST_SESSION=redis-session

// config/queue.php
'redis' => [
    'driver' => 'redis',
    'connection' => 'queue',
    'queue' => env('REDIS_QUEUE', 'registrations'),
    'retry_after' => 90,
    'block_for' => null,
    'after_commit' => false,
],

// Supervisor Configuration (/etc/supervisor/conf.d/laravel-worker.conf)
[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /path/to/your/project/artisan queue:work redis --queue=registrations --tries=3 --timeout=30
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=20
redirect_stderr=true
stdout_logfile=/var/log/supervisor/worker.log
stopwaitsecs=3600

// Nginx Load Balancer Configuration (/etc/nginx/nginx.conf)
http {
    upstream laravel_backend {
        least_conn;  # Least connection distribution
        server app1.example.com:80 max_fails=3 fail_timeout=30s;
        server app2.example.com:80 max_fails=3 fail_timeout=30s;
        server app3.example.com:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=registration_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name your-domain.com;

        location /api/user_reg {
            limit_req zone=registration_limit burst=20 nodelay;
            
            proxy_pass http://laravel_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_next_upstream error timeout http_500;
            proxy_next_upstream_tries 3;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}

//method:1 nginx complete setup : -----------------------------------------------------------------------
http {
    # Upstream configuration for load balancing
    upstream laravel_backend {
        least_conn;  # Least connection distribution
        server instasure.xyz:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=registration_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name instasure.xyz;

        # Log files
        access_log /var/log/nginx/instasure.access.log;
        error_log /var/log/nginx/instasure.error.log;

        # Location for the Laravel API endpoint
        location / {
            limit_req zone=registration_limit burst=20 nodelay;

            proxy_pass http://laravel_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_next_upstream error timeout http_500;
            proxy_next_upstream_tries 3;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Optional: Redirect non-www to www
        # Uncomment the below block if you need this redirection
        # server {
        #     listen 80;
        #     server_name www.instasure.xyz;
        #     return 301 http://instasure.xyz$request_uri;
        # }
    }
}

// end nginx full setup : -----------------------------------------------------------------------

// method:2 nginx setup : -----------------------------------------------------------------------
http {
    # Basic settings
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Upstream configuration for load balancing
    upstream laravel_backend {
        least_conn;  # Least connection distribution
        server 127.0.0.1:9000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=registration_limit:10m rate=10r/s;

    # Main server block for instasure-microsite-main.xyz
    server {
        listen 80;
        listen [::]:80;
        server_name instasure-microsite-main.xyz;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name instasure-microsite-main.xyz;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/instasure-microsite-main.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/instasure-microsite-main.xyz/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (uncomment if you're sure)
        # add_header Strict-Transport-Security "max-age=63072000" always;

        # Log files
        access_log /var/log/nginx/instasure.access.log;
        error_log /var/log/nginx/instasure.error.log;

        # Root directory and index
        root /var/www/instasure/public;
        index index.php index.html;

        # Main location block
        location / {
            try_files $uri $uri/ /index.php?$query_string;
            limit_req zone=registration_limit burst=20 nodelay;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_next_upstream error timeout http_500;
            proxy_next_upstream_tries 3;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # PHP-FPM configuration
        location ~ \.php$ {
            fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_buffering on;
            fastcgi_buffer_size 16k;
            fastcgi_buffers 16 16k;
        }

        # Deny access to .htaccess files
        location ~ /\.ht {
            deny all;
        }

        # Cache static files
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }
}
// end nginx full setup : -----------------------------------------------------------------------

//method : 3 for 10k rps each endpoint : --------------------------------------------------------
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Define 10 backend proxy servers
    upstream registration_backends {
        hash $request_id consistent; # Consistent hashing based on request ID
        
        # Each backend can handle 10k requests per second
        server backend1.instasure.xyz:9001 max_fails=3 fail_timeout=30s weight=1;
        server backend2.instasure.xyz:9002 max_fails=3 fail_timeout=30s weight=1;
        server backend3.instasure.xyz:9003 max_fails=3 fail_timeout=30s weight=1;
        server backend4.instasure.xyz:9004 max_fails=3 fail_timeout=30s weight=1;
        server backend5.instasure.xyz:9005 max_fails=3 fail_timeout=30s weight=1;
        server backend6.instasure.xyz:9006 max_fails=3 fail_timeout=30s weight=1;
        server backend7.instasure.xyz:9007 max_fails=3 fail_timeout=30s weight=1;
        server backend8.instasure.xyz:9008 max_fails=3 fail_timeout=30s weight=1;
        server backend9.instasure.xyz:9009 max_fails=3 fail_timeout=30s weight=1;
        server backend10.instasure.xyz:9010 max_fails=3 fail_timeout=30s weight=1;
        
        keepalive 100;
    }

    # Global rate limit zone
    limit_req_zone $binary_remote_addr zone=registration_limit:50m rate=100000r/s;

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name instasure.xyz;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name instasure.xyz;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/instasure.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/instasure.xyz/privkey.pem;
        
        # SSL optimization
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;

        # Logging
        access_log /var/log/nginx/instasure.access.log combined buffer=512k flush=1m;
        error_log /var/log/nginx/instasure.error.log;

        # Main registration endpoint
        location /api/usr_registration/v1 {
            # Rate limiting with high burst capacity
            limit_req zone=registration_limit burst=1000 nodelay;

            # Generate request ID if not present
            set $request_id $request_id;
            if ($request_id = "") {
                set $request_id $request_time$request_length$remote_addr;
            }

            # Proxy settings
            proxy_pass http://registration_backends;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffering
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            proxy_busy_buffers_size 32k;

            # Retry settings
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }

        # Health check endpoint for backends
        location /health {
            access_log off;
            return 200 'healthy\n';
        }

        # Nginx status monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }

    # Optimization settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # File descriptor settings
    worker_rlimit_nofile 65535;
    
    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}

events {
    worker_connections 65535;
    use epoll;
    multi_accept on;
}
-------------------------------------------------------------------------------------------------

// Redis Configuration (/etc/redis/redis.conf)
maxmemory 8gb
maxmemory-policy allkeys-lru
appendonly yes
appendfsync everysec
no-appendfsync-on-rewrite yes
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
timeout 0
tcp-keepalive 300

==============================================================================================================================================
To deploy and run this system:

Set up Infrastructure:
---------------------
# Install Redis
sudo apt-get install redis-server

# Install Supervisor
sudo apt-get install supervisor

# Configure PHP-FPM with proper settings
sudo vim /etc/php/8.2/fpm/php.ini

Start Queue Workers:
--------------------
# Reload supervisor
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start laravel-worker:*

Optimize Laravel:
------------------
php artisan config:cache
php artisan route:cache
php artisan view:cache

Monitor the System:
----------------------
# Monitor Redis
redis-cli info | grep connected_clients
redis-cli info | grep used_memory_human

# Monitor Queue
php artisan queue:monitor redis
------------------------------------------------------------
Key Features for Handling 1M Requests:

Request Flow:

Immediate response with request ID
Asynchronous processing via Redis queue
Status checking endpoint


Performance Optimizations:

Redis for caching and queuing
Database indexes
Load balancing across multiple servers
Rate limiting to prevent overload
Supervisor for managing multiple queue workers


Error Handling:

Validation via Form Request
Database transaction management
Job retries
Comprehensive logging


Monitoring:

Queue monitoring
Worker status tracking
Redis memory usage
Error logging
