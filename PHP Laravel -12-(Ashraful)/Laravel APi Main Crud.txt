*********if user loggedin then set the token in header : 

#thunder client : 
-----------------
url => domain_name/api/route_name

header=> 
        Content-type : application/json // for upload image , Content-Type:  multipart/form-data //no need content type for uploading image . method must be : post method . 
        Authorization: Bearer Past_the_token_id

body => for the post method send data in json formate. 



# app > http > middleware > kernal.php . 
---------------------------------------------
>>> uncomment the api =[
scantum::class, 
]

--------------------------------------------
api> route: 
-------------
Route::get('/post',[CrudController::class,'show']);
Route::post('/post_store',[CrudController::class,'store']);


#controller : 
--------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\Post;
use App\Models\User;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

class CrudController extends Controller
{
    //

    public function show(){
        $post = Post::all();
        $response = [
            'post'=> $post,
            'msg' => 'Fetcing post successfully'
        ];
        return response()->json($response,200);
    }

    public function store(Request $request){
        $validator = Validator::make($request->all(),[
            'title' => 'required',
            'user_id' => 'required',
        ]);

        if($validator->fails()) {

            return response()->json([

                'success' => false,

                'message' => $validator->errors()->first()

            ]);

        }

        $post = Post::create([

            'title'     => $request->title,
            'user_id'    => $request->user_id,

        ]);



        return response()->json([

            'success' => true,

            'post' => $post,

            'message' => 'Post register successfully.'
        ],201);
    }
}



-----------------------------------------------------------
#for uploading image: 
-----------------------------------------------------------
 public function upload(Request $request)
    {
        // Validate the request
        $request->validate([
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        // Handle the uploaded file
        if ($request->file('image')) {
            $file = $request->file('image');
            $path = $file->store('images', 'public');

            // Return a response
            return response()->json([
                'success' => true,
                'message' => 'Image uploaded successfully!',
                'path' => $path
            ]);
        }

        return response()->json([
            'success' => false,
            'message' => 'Image upload failed!'
        ], 500);
    }







# Data pass function to function with static function : 
-----------------------------------------------------------
the api route is =>  Route::post('/instasure-api-payment', [HDCCustomerController::class, 'payment'])->name('api_payment');
-----------------------------------------------------------
  public function payment(Request $request)
    {
        // Extract request data
        $category_id = encrypt($request->input('category_id', 12));
        $order_id = encrypt($request->input('order_id'));
        $order_amount = encrypt($request->input('order_amount'));
        $pgw_name = "aamarPay";
        $api = "true";

        // Prepare response data
        $response = [
            'success' => true,
            'msg' => 'Fetching HDC card successfully',
            'category_id' => $category_id,
            'order_id' => $order_id,
            'order_amount' => $order_amount,
            'pgw_name' => $pgw_name,
            'api' => $api
        ];

        // Call the payNow method with response data
        // $payNowResponse = $this->payNow(new Request($response));

        $payNowResponse = PaymentController::payNow(new Request($response));

        // Return the payNow method's response
        return $payNowResponse;
    }

    public static function payNow(Request $request)
    {
        // Log or debug
        // Log::info("payNow function called");

        var_dump($request->all());

        // Ensure the required data is present and decrypted
        try {
            $category_id = decrypt($request->input('category_id'));
            $order_id = decrypt($request->input('order_id'));
            $order_amount = decrypt($request->input('order_amount'));
        } catch (\Exception $e) {
            Log::error('Decryption error: ' . $e->getMessage());
            return response()->json(['success' => false, 'msg' => 'Invalid data'], 400);
        }

        // Generate a random string
        $length = 10;
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $randomString = substr(str_shuffle($characters), 0, $length);

        // Create and save the payment redirect data
        $paymentRedirect = new PaymentRedirect();
        $paymentRedirect->category_id = $category_id;
        $paymentRedirect->order_id = $order_id;
        $paymentRedirect->order_amount = $order_amount;
        $paymentRedirect->pgw_name = $request->input('pgw_name');
        $paymentRedirect->order_random_id = $randomString;
        $paymentRedirect->save();

        // Return response
        return response()->json(['success' => true, 'msg' => 'Payment processed successfully', 'payment_redirect_id' => $paymentRedirect], 200);
    }
