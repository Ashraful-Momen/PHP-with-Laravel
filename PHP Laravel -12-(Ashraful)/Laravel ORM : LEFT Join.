Hereâ€™s a **note on LEFT JOIN** with a simple explanation, ASCII diagram, and Laravel ORM example.

---

### **LEFT JOIN in SQL**

A **LEFT JOIN** retrieves all rows from the **left table** and only the matching rows from the **right table**. If no match is found, `NULL` values are returned for the right table's columns.

---

### **ASCII Representation**
```
TABLE1 (Left)                     TABLE2 (Right)
+----+-------+                   +----+-------+
| ID | Name  |                   | ID | Order |
+----+-------+                   +----+-------+
| 1  | Alice |                   | 1  | A123  |
| 2  | Bob   |                   | 3  | B456  |
| 3  | Charlie                   | 4  | C789  |
+----+-------+                   +----+-------+

LEFT JOIN Result:
+----+---------+-------+
| ID | Name    | Order |
+----+---------+-------+
| 1  | Alice   | A123  |
| 2  | Bob     | NULL  |
| 3  | Charlie | B456  |
+----+---------+-------+
```

---

### **SQL Query**
```sql
SELECT table1.id, table1.name, table2.order
FROM table1
LEFT JOIN table2
ON table1.id = table2.id;
```

---

### **LEFT JOIN in Laravel ORM**

#### Query Builder Syntax:
```php
use Illuminate\Support\Facades\DB;

$results = DB::table('table1') // Left Table
    ->leftJoin('table2', 'table1.id', '=', 'table2.id') // Right Table
    ->select('table1.id', 'table1.name', 'table2.order') // Specify columns
    ->get();
```

#### Output:
```php
[
    { "id": 1, "name": "Alice", "order": "A123" },
    { "id": 2, "name": "Bob", "order": null },
    { "id": 3, "name": "Charlie", "order": "B456" }
]
```

---

### **Notes**
1. **Left Table**: The first table in the query (`table1`) is the **left table**. All its rows appear in the result.
2. **Right Table**: The second table in the query (`table2`) is the **right table**. Only matching rows appear; unmatched rows return `NULL`.
3. Use **Eloquent ORM** when working with models, or **DB query builder** for raw table access.

--- 

======================================= Multiple table left join =====================================
To perform a LEFT JOIN with multiple tables in Laravel, you can chain multiple leftJoin() methods. This allows you to join more than two tables in a single query.

--------------------
MySql
--------------------
SELECT table1.column_name, table2.column_name, table3.column_name
FROM table1
LEFT JOIN table2 ON table1.column_name = table2.column_name
LEFT JOIN table3 ON table2.column_name = table3.column_name;
-------------------
ORM
-------------------
use Illuminate\Support\Facades\DB;

$results = DB::table('table1')
    ->leftJoin('table2', 'table1.column_name', '=', 'table2.column_name') // First LEFT JOIN
    ->leftJoin('table3', 'table2.column_name', '=', 'table3.column_name') // Second LEFT JOIN
    ->select('table1.column_name as col1', 'table2.column_name as col2', 'table3.column_name as col3') // Select desired columns
    ->get();


