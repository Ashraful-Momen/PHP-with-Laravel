#forget password : 
------------------------
route : 
---------
//Ashraful : Forget & reset Password ---------------------------------------------------------------------------------------------------------------------
// Show forget password form
Route::get('/forget-password', 'Frontend\AuthController@showForgetPasswordForm')->name('password.forget.form');

// Process forget password request
Route::post('/forget-password', 'Frontend\AuthController@forgetPassword')->name('password.forget');

// Show reset password form
Route::get('/reset-password', 'Frontend\AuthController@showResetPasswordForm')->name('password.reset.form');

// Process reset password request
Route::post('/reset-password', 'Frontend\AuthController@resetPassword')->name('password.reset');

#controller : 
----------------

<?php

namespace App\Http\Controllers\Frontend;

use App\User;
use App\Helpers\UserInfo;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Model\VerificationCode;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;

use Brian2694\Toastr\Facades\Toastr;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Session;

class AuthController extends Controller
{
    public function login()
    {
        return view('auth.login');
    }

    public function custom_logout(Request $request)
    {

        if (Session::has('bkashMicrosite')) {

            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect('/instasure/microsite/bkashMicrosite');
        }

        if (Session::has('nagadMicrosite')) {
            // dd("Logout");
            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect('/instasure/microsite/nagadMicrosite');
        }
        if (Session::has('aamarPayMicrosite')) {

            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect('/instasure/microsite/aamarPayMicrosite');
        }
        if (Session::has('RobiMicrosite')) {

            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect('/instasure/microsite/RobiMicrosite');
        }
    }
    public function register(Request $request)
    {
        $this->validate($request, [
            'name' =>  'required',
            'phone' => 'required|regex:/(01)[0-9]{9}/|unique:users,phone',
            'password' => 'required|min:6',
            // 'g-recaptcha-response' => 'required',
        ]);

        $userReg = new User();
        $userReg->name = $request->name;
        //$userReg->email = $request->email;
        $userReg->phone = $request->phone;
        $userReg->password = Hash::make($request->password);
        $userReg->user_type = 'customer';
        $userReg->banned = 1;
        $userReg->save();

        Session::put('phone', $request->phone);
        Session::put('password', $request->password);
        Session::put('user_type', 'customer');

        Toastr::success('Your registration successfully done!');
        return redirect()->route('get-verification-code', $userReg->id);
    }

    //Ashraful : Forget & reset Password ---------------------------------------------------------------------------------------------------------------------


    public function showForgetPasswordForm()
    {
        return view('auth.passwords.ashraful_reset_password');
    }

    public function showResetPasswordForm()
    {
        return view('auth.reset_password');
    }

    public function forgetPassword(Request $request)
    {
        $this->validate($request, [
            'phone' => 'required|regex:/(01)[0-9]{9}/',
        ]);

        $user = User::where('phone', $request->phone)->first();



        // dd($user);

        if (!$user) {
            Toastr::error('No user found with this phone number!');
            return redirect()->back();
        }

        // Generate 6-digit numeric password
        $newPassword = str_pad(random_int(0, 999999), 6, '0', STR_PAD_LEFT);




        // Update user password
        $user->password = Hash::make($newPassword);
        $user->save();




        // Prepare SMS message
        $message = "Your new password is: " . $newPassword . ". Please change it after logging in. Instasure, Hotline: +880960-6252525";

        // $result = UserInfo::smsAPI('88' . $user->phone,"Your new password is: " . $newPassword . ". Please change it after logging in. Instasure, Hotline: 0960-6252525");

        // $result = UserInfo::smsAPI('88' . $user->phone, "Your new password: ".$newPassword. ". Please change it after logging in. Instasure, Hotline: +880960-6252525") ;
        // $result = UserInfo::smsAPI('88' . $user->phone,  $message);
        // Log::info('Password reset SMS sending result', [
        //     'phone' => $user->phone,
        //     'result' => $result
        // ]);

        // dd("send the password");

        // Send SMS
        try {
            $phone = $user->phone;
             $result = UserInfo::smsAPI('88' . $user->phone, "Your new password: ".$newPassword. ". Please change it after logging in. Instasure, Hotline: +880960-6252525") ;
            // $result = UserInfo::smsAPI('88' . $phone, $message);

            Log::info('Password reset SMS sending result', [
                'phone' => $phone,
                'result' => $result
            ]);

            // Remove the dd() call as it stops execution
            // dd($phone, $user->name);
        } catch (\Throwable $th) {
            Log::error("Password Reset SMS Sending Exception", [
                'message' => $th->getMessage(),
                'trace' => $th->getTraceAsString()
            ]);
            Toastr::warning('SMS delivery might be delayed. Please check your email if provided.');
        }

        // Send Email if email exists
        if ($user->email) {
            try {
                $this->sendPasswordResetEmail($user, $newPassword);
                Log::info('Password reset email sent', ['email' => $user->email]);
            } catch (\Exception $e) {
                Log::error('Password reset email sending failed', [
                    'email' => $user->email,
                    'error' => $e->getMessage()
                ]);
            }
        }

        Toastr::success('New password has been sent to your phone' . ($user->email ? ' and email' : '') . '!');
        return redirect()->route('login');
    }

    // public function forgetPassword(Request $request)
    // {
    //     $this->validate($request, [
    //         'phone' => 'required|regex:/(01)[0-9]{9}/',
    //     ]);

    //     $user = User::where('phone', $request->phone)->first();
    //     if (!$user) {
    //         Toastr::error('No user found with this phone number!');
    //         return redirect()->back();
    //     }

    //     // Generate 6-digit numeric password
    //     $newPassword = str_pad(random_int(0, 999999), 6, '0', STR_PAD_LEFT);

    //     // Update user password
    //     $user->password = Hash::make($newPassword);
    //     $user->save();

    //     // Prepare SMS message
    //     $message = "Your new password is: " . $newPassword . ". Please change it after logging in. Instasure, Hotline: +880960-6252525";
    //     // $result = UserInfo::smsAPI('88' . $user->phone, $message);

    //     // ------------------------- test sms code --------------------
    //     $user = Auth::user();

    //     $result = UserInfo::smsAPI('88' . $user->phone, "Your Password: ". $newPassword);
    //     // ------------------------- test sms code --------------------

    //     // Send SMS
    //     try {
    //         $phone = $user->phone;


    //         $result = UserInfo::smsAPI('88' . $phone, $message);
    //         Log::info('Password reset SMS sending result', [
    //             'phone' => $phone,
    //             'result' => $result
    //         ]);
    //           dd($phone,$user->name);
    //     } catch (\Throwable $th) {
    //         Log::error("Password Reset SMS Sending Exception", [
    //             'message' => $th->getMessage(),
    //             'trace' => $th->getTraceAsString()
    //         ]);
    //         Toastr::warning('SMS delivery might be delayed. Please check your email if provided.');
    //     }

    //     // Send Email if email exists
    //     if ($user->email) {
    //         try {
    //             $this->sendPasswordResetEmail($user, $newPassword);
    //             Log::info('Password reset email sent', ['email' => $user->email]);
    //         } catch (\Exception $e) {
    //             Log::error('Password reset email sending failed', [
    //                 'email' => $user->email,
    //                 'error' => $e->getMessage()
    //             ]);
    //         }
    //     }

    //     // dd($user->phone, $user->name);

    //     Toastr::success('New password has been sent to your phone' . ($user->email ? ' and email' : '') . '!');
    //     return redirect()->route('login');
    // }

    private function sendPasswordResetEmail($user, $password)
    {
        $emailContent = '
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Password Reset</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 0;
                background-color: #f6f6f6;
            }
            .container {
                max-width: 600px;
                margin: 20px auto;
                padding: 20px;
                background: #ffffff;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            .header {
                text-align: center;
                padding: 20px 0;
                background: #007bff;
                color: #ffffff;
                border-radius: 8px 8px 0 0;
            }
            .content {
                padding: 20px;
                color: #333333;
            }
            .password-box {
                background: #f8f9fa;
                padding: 15px;
                margin: 20px 0;
                border-radius: 5px;
                text-align: center;
                border: 1px dashed #dee2e6;
            }
            .footer {
                text-align: center;
                padding: 20px;
                color: #666666;
                font-size: 14px;
            }
            .button {
                display: inline-block;
                padding: 10px 20px;
                background-color: #007bff;
                color: #ffffff;
                text-decoration: none;
                border-radius: 5px;
                margin-top: 15px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Password Reset</h1>
            </div>
            <div class="content">
                <p>Hello ' . $user->name . ',</p>
                <p>We have received a request to reset your password. Here is your temporary password:</p>

                <div class="password-box">
                    <h2>' . $password . '</h2>
                </div>

                <p>For security reasons, we strongly recommend changing this password immediately after logging in.</p>

                <p>If you did not request this password reset, please contact our support team immediately.</p>

                <center>
                    <a href="' . route('login') . '" class="button">Login to Your Account</a>
                </center>
            </div>
            <div class="footer">
                <p>This is an automated message, please do not reply to this email.</p>
                <p>&copy; ' . date('Y') . ' ' . config('app.name') . '. All rights reserved.</p>
            </div>
        </div>
    </body>
    </html>';

        Mail::html($emailContent, function ($message) use ($user) {
            $message->to($user->email)
                ->subject('Password Reset - ' . config('app.name'));
        });
    }

    public function resetPassword(Request $request)
    {
        $this->validate($request, [
            'phone' => 'required|regex:/(01)[0-9]{9}/',
            'temp_password' => 'required',
            'new_password' => 'required|min:6|confirmed',
        ]);

        $user = User::where('phone', $request->phone)->first();
        if (!$user || !Hash::check($request->temp_password, $user->password)) {
            Toastr::error('Invalid credentials!');
            return redirect()->back();
        }

        $user->password = Hash::make($request->new_password);
        $user->save();

        Toastr::success('Password successfully reset!');
        return redirect()->route('login');
    }



    // public function showForgetPasswordForm()
    // {
    //     return view('auth.passwords.ashraful_reset_password');
    //     // return view('auth.forget_password');
    // }

    // public function showResetPasswordForm()
    // {
    //     return view('auth.reset_password');
    // }

    // public function forgetPassword(Request $request)
    // {
    //     $this->validate($request, [
    //         'phone' => 'required|regex:/(01)[0-9]{9}/',
    //     ]);

    //     $user = User::where('phone', $request->phone)->first();


    //     if (!$user) {
    //         Toastr::error('No user found with this phone number!');
    //         return redirect()->back();
    //     }

    //     // Generate temporary password
    //     // $newPassword = Str::random(8);

    //     // Generate 6-digit numeric password
    //     $newPassword = str_pad(random_int(0, 999999), 6, '0', STR_PAD_LEFT);

    //     // Update user password
    //     $user->password = Hash::make($newPassword);
    //     $user->save();

    //     // Prepare SMS message
    //     $message = "Your new password is: " . $newPassword . ". Please change it after logging in.";

    //     // Send SMS
    //     try {
    //         // Add '88' prefix to phone number as per your example
    //         $phone = $user->phone;

    //         $result = UserInfo::smsAPI('88'.$phone, $message);
    //         // $result = UserInfo::smsAPI($phone, $message);





    //         Log::info('Password reset SMS sending result', [
    //             'phone' => $phone,
    //             'result' => $result
    //         ]);
    //     } catch (\Throwable $th) {
    //         Log::error("Password Reset SMS Sending Exception", [
    //             'message' => $th->getMessage(),
    //             'trace' => $th->getTraceAsString()
    //         ]);

    //         // Don't throw the exception, continue with email if available
    //         Toastr::warning('SMS delivery might be delayed. Please check your email if provided.');
    //     }

    //     // Send Email if email exists
    //     if ($user->email) {
    //         try {
    //             $this->sendPasswordResetEmail($user->email, $newPassword);
    //             Log::info('Password reset email sent', ['email' => $user->email]);
    //         } catch (\Exception $e) {
    //             Log::error('Password reset email sending failed', [
    //                 'email' => $user->email,
    //                 'error' => $e->getMessage()
    //             ]);
    //         }
    //     }

    //     Toastr::success('New password has been sent to your phone' . ($user->email ? ' and email' : '') . '!');
    //     return redirect()->route('login');
    // }

    // private function sendPasswordResetEmail($email, $password)
    // {
    //     Mail::send('emails.password_reset', ['password' => $password], function ($message) use ($email) {
    //         $message->to($email)
    //             ->subject('Password Reset');

    //     });
    // }

    // public function resetPassword(Request $request)
    // {
    //     $this->validate($request, [
    //         'phone' => 'required|regex:/(01)[0-9]{9}/',
    //         'temp_password' => 'required',
    //         'new_password' => 'required|min:6|confirmed',
    //     ]);

    //     $user = User::where('phone', $request->phone)->first();

    //     if (!$user || !Hash::check($request->temp_password, $user->password)) {
    //         Toastr::error('Invalid credentials!');
    //         return redirect()->back();
    //     }

    //     $user->password = Hash::make($request->new_password);
    //     $user->save();

    //     Toastr::success('Password successfully reset!');
    //     return redirect()->route('login');
    // }
}


================================================================================= User Password Update / change ========================================================
Route: 
---------
//Ashraful : change the passwd by User:-------------------------------
Route::post('/profile/change-password', 'Frontend\HomeController@changePassword')->name('user.change-password');



#Controller : 
--------------
    //Ashraful :change password
    public function changePassword(Request $request)
    {
        $this->validate($request, [
            'current_password' => 'required',
            'new_password' => 'required|min:6|different:current_password',
            'confirm_password' => 'required|same:new_password',
        ]);

        $user = Auth::user();

        if (!Hash::check($request->current_password, $user->password)) {
            Toastr::error('Current password does not match');
            return back();
        }

        $user->password = Hash::make($request->new_password);
        $user->save();

        Toastr::success('Password changed successfully');
        return back();
    }
    
#View: 
-----------
 {{-- //Ashraful : change password --}}
                                  <div class="services-box mt-4">
                                    <div class="content">
                                        <div class="" style="background: #f1f1f1; padding: 5px 5px 5px 10px;">Change Password</div>
                                        <div class="tab_content m-4">
                                            <div class="tabs_item">
                                                <form action="{{ route('user.change-password') }}" method="POST">
                                                    @csrf
                                                    <div class="row">
                                                        <label for="current_password" class="c-form-label col-md-3 col-lg-3">Current Password</label>
                                                        <div class="form-group mb-2 col-md-8 col-lg-8">
                                                            <input type="password" name="current_password" class="form-control" required>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <label for="new_password" class="c-form-label col-md-3 col-lg-3">New Password</label>
                                                        <div class="form-group mb-2 col-md-8 col-lg-8">
                                                            <input type="password" name="new_password" class="form-control" required>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <label for="confirm_password" class="c-form-label col-md-3 col-lg-3">Confirm Password</label>
                                                        <div class="form-group mb-2 col-md-8 col-lg-8">
                                                            <input type="password" name="confirm_password" class="form-control" required>
                                                        </div>
                                                    </div>
                                                    <div class="text-center">
                                                        <button type="submit" class="default-btn mt-4">Change Password<span></span></button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                {{-- //Ashraful : change password --}}
    
