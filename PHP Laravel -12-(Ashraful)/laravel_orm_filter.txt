



----------------------------------------------------optimize sql query----------------------------------------------------------------------------

#find() => use find method for 1 row of a table.

#get() => use get method for multiple row of table , User::where('col_name','match_col')->get()

#first() => use get method for single row of table , User::where('col_name','match_col')->first(); // if match then just get 1 row ...

// $life_health = LifeAndHealth::all();
// $life_health = LifeAndHealth::whereNotNull('child_dealer_id')->get();
   $life_health = LifeAndHealth::whereNull('child_dealer_id')->get();




==================================================================================================================================================

 $addresses = Address::with('user')->get(); | here 'user' is the function inside Address model ....
======================================================Django alternative only()-> laravel select(col_name,col_name)==============================
Route::get('/check', function(){
    $users = User::select('id', 'name')->get();

    echo "<pre>";

    foreach ($users as $user) {
        dd($user->id, $user->name);
    }

    return view('users.index', compact('users'));
});
======================================================Django alternative differ()-> laravel lazy()==============================
$user = User::find(1);
$addresses = $user->address()->lazy()->get();
===================================================================ORM filter method============================================================================================================================
#if one_column is null in Table of DB, then we get error trying to get object ! for fix this issue we can use laravel helper method .

suppose we want to fetch country from user->name, if this column is null then we can use  ... optional{{($user->name)}}.

  @foreach ($users as $user)
                        <p class="fs-5">{{ optional($user->name)}}</p>  <------------using hte helper function---------------->
                        @foreach ($user->addresses as $address)
                            <p>{{$address->country}}</p>
                        @endforeach
                    @endforeach
------------------------------another way to set the user name as default:return $this->belongsTo(User::class)->withDefault(['name'=>'Guest_User',]);  ------------------------------------

Model :: Address =>
======================

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Address extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'country',
    ];

    public function user(){
        return $this->belongsTo(User::class)->withDefault([
            'name'=>'Guest_User',
        ]);
    }



}
====================================ORM filter method: has()->==============================================

fetch those  user , who has country

$user = User::has('addresses')->get();

#for optimize sql query => $user = User::has('addresses')->with('addresses')->get();

#fetch those user has 2 or more post => $user = User::has('addresses','>=', 2)->get(); | here addresses() is the method of User model .

# suppose user has country with 'ABC' in country_title ex:'canadaABC' . for find the user with the title of ABC => $user = User::WhereHas('country',function($query){ $query->where('country' 'like' '%ABC%') })->get();

# if any user haven't any country name , for find those user => $user = User::doesntHave('address')->get();
=============================================================================================================
=========================================================================================================================================================================================
#how to use pluck() : if we get collection means multiple data , then we use loop in blade to show the data. but we can solve it easly with plucks().
--------------------------
//parent commission for life and health : -----------------------------------------
    //show the commission page : -----------------------------------------------------------
    function parent_commission()
    {



        $parent = Dealer::where('user_id', Auth::id())->first();
        $childDealers = Dealer::where('parent_id', $parent->id)->latest()->get();

        // Extract 'user_id' values from the $childDealers collection
        $childDealerIds = $childDealers->pluck('user_id')->toArray();



        // Fetch orders based on the extracted user_ids
        $orders = LifeAndHealthChildOrder::whereIn('customer_id', $childDealerIds)->get();

        return view('backend.parent_dealer.commission_log.life_and_health_commission', compact('orders'));
    }
=====================================================================================================================================================================================
#if policyData Table  the all column 'form_status' value ==1 . then return $allFOrmStatusOne (which help me to show a button).

$allFormStatusOne = $policyData->every(fn($item) => $item->form_status == 1);


#all data copy one table to another table -> 
------------------------------------------------

 #shortcut method ....................................................................................

        // DB::table('life_and_health_child_orders')->insert(DB::table('policy_providers')->select('*')->get()->toArray());

        // Copy all columns from 'policy_providers' to 'policy_datas'
        // $dataToInsert = DB::table('policy_datas')->select('*')->get()->toArray();
        $dataToInsert = DB::table('policy_datas')->select(
            'order_parent_id',
            'form_status',
            'cart_id',
            'product_id',
            'customer_id',
            'Pname',
            'image',
            'duration',
            'discount',
            'price',
            'hospital_card_fee',
            'teli_medicine_fee',
            'before_discount_price',
            'after_discount_price',
            'o_name',
            'o_gender',
            'o_phone',
            'o_email',
            'o_DOB',
            'o_id_type',
            'o_id_number',
            'o_id_file',
            'relation_with_nominee',
            'n_name',
            'n_gender',
            'n_phone',
            'n_email',
            'n_DOB',
            'n_id_type',
            'n_id_number',
            'n_id_file'
        )->get()->toArray();


        // dd($dataToInsert);

        // Now, insert the data into 'policy_datas' table
        // $check_children = DB::table('life_and_health_child_orders')->insert($dataToInsert);



        // $check_children = LifeAndHealthChildOrder::all();

        // Convert each object in $dataToInsert to an array
        $dataToInsertArray = array_map(function ($record) {
            return (array) $record;
        }, $dataToInsert);

        // Now, insert the data into 'life_and_health_child_orders' table
        $check_children=DB::table('life_and_health_child_orders')->insert($dataToInsertArray);


        dd($check_children);
