# Complete Laravel API Testing Guide - From Zero to Advanced

## Table of Contents
1. [Setting Up The Environment](#1-setting-up-the-environment)
2. [Understanding Basic Testing Concepts](#2-understanding-basic-testing-concepts)
3. [Creating Our First Test](#3-creating-our-first-test)
4. [CRUD API Testing](#4-crud-api-testing)
5. [Advanced Testing Techniques](#5-advanced-testing-techniques)
6. [Best Practices and Tips](#6-best-practices-and-tips)

## 1. Setting Up The Environment

### Initial Setup
```bash
# Create a new Laravel project
composer create-project laravel/laravel laravel-testing

# Navigate to project directory
cd laravel-testing

# Install dependencies
composer install
```

### Configure Testing Environment
1. Create a testing database in your `.env.testing`:

```env
DB_CONNECTION=sqlite
DB_DATABASE=:memory:
```

2. Configure `phpunit.xml`:
```xml
<php>
    <env name="DB_CONNECTION" value="sqlite"/>
    <env name="DB_DATABASE" value=":memory:"/>
    <env name="APP_ENV" value="testing"/>
</php>
```

## 2. Understanding Basic Testing Concepts

### Test Structure
Laravel tests follow this basic structure:
```php
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /** @test */
    public function it_can_do_something()
    {
        // 1. Arrange - Set up your test
        // 2. Act - Perform the action
        // 3. Assert - Check the results
    }
}
```

### Key Testing Methods
```php
// Common assertions
$this->assertTrue($value);
$this->assertEquals($expected, $actual);
$this->assertDatabaseHas('table', ['column' => 'value']);
$this->assertJson($data);

// HTTP testing
$this->get('/api/endpoint');
$this->post('/api/endpoint', $data);
$this->put('/api/endpoint', $data);
$this->delete('/api/endpoint');

// Response assertions
$response->assertStatus(200);
$response->assertJson(['key' => 'value']);
$response->assertJsonStructure(['data' => ['*' => ['id', 'name']]]);
```

## 3. Creating Our First Test

Let's create a simple Product API and test it.

### Create Product Model and Migration
```bash
php artisan make:model Product -m
```

```php
// database/migrations/xxx_create_products_table.php
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->text('description');
        $table->decimal('price', 8, 2);
        $table->timestamps();
    });
}
```

### Create Product Controller
```php
// app/Http/Controllers/ProductController.php
namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'price' => 'required|numeric|min:0'
        ]);

        $product = Product::create($validated);

        return response()->json($product, 201);
    }
}
```

### Create Our First Test
```php
// tests/Feature/ProductTest.php
namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_create_a_product()
    {
        $productData = [
            'name' => 'Test Product',
            'description' => 'Test Description',
            'price' => 99.99
        ];

        $response = $this->postJson('/api/products', $productData);

        $response
            ->assertStatus(201)
            ->assertJson([
                'name' => $productData['name'],
                'description' => $productData['description'],
                'price' => $productData['price']
            ]);

        $this->assertDatabaseHas('products', $productData);
    }
}
```

## 4. CRUD API Testing

### Complete Product Controller
```php
namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    public function index()
    {
        $products = Product::all();
        return response()->json($products);
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'price' => 'required|numeric|min:0'
        ]);

        $product = Product::create($validated);
        return response()->json($product, 201);
    }

    public function show(Product $product)
    {
        return response()->json($product);
    }

    public function update(Request $request, Product $product)
    {
        $validated = $request->validate([
            'name' => 'sometimes|string|max:255',
            'description' => 'sometimes|string',
            'price' => 'sometimes|numeric|min:0'
        ]);

        $product->update($validated);
        return response()->json($product);
    }

    public function destroy(Product $product)
    {
        $product->delete();
        return response()->json(null, 204);
    }
}
```

### Complete CRUD Tests
```php
namespace Tests\Feature;

use Tests\TestCase;
use App\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_products()
    {
        $products = Product::factory()->count(3)->create();

        $response = $this->getJson('/api/products');

        $response
            ->assertStatus(200)
            ->assertJsonCount(3)
            ->assertJsonStructure([
                '*' => ['id', 'name', 'description', 'price', 'created_at', 'updated_at']
            ]);
    }

    /** @test */
    public function it_can_create_a_product()
    {
        $productData = [
            'name' => 'New Product',
            'description' => 'Product Description',
            'price' => 99.99
        ];

        $response = $this->postJson('/api/products', $productData);

        $response
            ->assertStatus(201)
            ->assertJson($productData);

        $this->assertDatabaseHas('products', $productData);
    }

    /** @test */
    public function it_can_show_a_product()
    {
        $product = Product::factory()->create();

        $response = $this->getJson("/api/products/{$product->id}");

        $response
            ->assertStatus(200)
            ->assertJson([
                'id' => $product->id,
                'name' => $product->name,
                'description' => $product->description,
                'price' => $product->price
            ]);
    }

    /** @test */
    public function it_can_update_a_product()
    {
        $product = Product::factory()->create();
        $updateData = ['name' => 'Updated Name'];

        $response = $this->putJson("/api/products/{$product->id}", $updateData);

        $response
            ->assertStatus(200)
            ->assertJson($updateData);

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'name' => 'Updated Name'
        ]);
    }

    /** @test */
    public function it_can_delete_a_product()
    {
        $product = Product::factory()->create();

        $response = $this->deleteJson("/api/products/{$product->id}");

        $response->assertStatus(204);
        $this->assertDatabaseMissing('products', ['id' => $product->id]);
    }

    /** @test */
    public function it_validates_required_fields_for_creation()
    {
        $response = $this->postJson('/api/products', []);

        $response
            ->assertStatus(422)
            ->assertJsonValidationErrors(['name', 'description', 'price']);
    }
}
```

## 5. Advanced Testing Techniques

### Using Factories
```php
// database/factories/ProductFactory.php
namespace Database\Factories;

use App\Models\Product;
use Illuminate\Database\Eloquent\Factories\Factory;

class ProductFactory extends Factory
{
    protected $model = Product::class;

    public function definition()
    {
        return [
            'name' => $this->faker->productName,
            'description' => $this->faker->paragraph,
            'price' => $this->faker->randomFloat(2, 10, 1000)
        ];
    }
}
```

### Testing with Authentication
```php
/** @test */
public function it_requires_authentication_to_create_product()
{
    $user = User::factory()->create();
    $productData = [
        'name' => 'New Product',
        'description' => 'Description',
        'price' => 99.99
    ];

    // Test without authentication
    $this->postJson('/api/products', $productData)
        ->assertStatus(401);

    // Test with authentication
    $this->actingAs($user)
        ->postJson('/api/products', $productData)
        ->assertStatus(201);
}
```

### Testing API Resources
```php
namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class ProductResource extends JsonResource
{
    public function toArray($request)
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'description' => $this->description,
            'price' => $this->price,
            'formatted_price' => '$' . number_format($this->price, 2),
            'created_at' => $this->created_at->toISOString()
        ];
    }
}

// Testing the Resource
/** @test */
public function it_correctly_formats_product_resource()
{
    $product = Product::factory()->create([
        'price' => 99.99
    ]);

    $resource = new ProductResource($product);
    $resourceArray = $resource->toArray(request());

    $this->assertEquals('$99.99', $resourceArray['formatted_price']);
    $this->assertArrayHasKey('created_at', $resourceArray);
}
```

## 6. Best Practices and Tips

### 1. Use Database Transactions
```php
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ProductTest extends TestCase
{
    use DatabaseTransactions;
    // Tests here
}
```

### 2. Create Test Helper Methods
```php
class TestCase extends BaseTestCase
{
    protected function createProduct($overrides = [])
    {
        return Product::factory()->create($overrides);
    }

    protected function createAuthenticatedUser()
    {
        $user = User::factory()->create();
        return $this->actingAs($user);
    }
}
```

### 3. Group Related Tests
```php
/** @test */
public function product_validation()
{
    $this->assertTrue($this->validateProduct(['name' => ''])->fails());
    $this->assertTrue($this->validateProduct(['price' => -1])->fails());
    $this->assertTrue($this->validateProduct(['description' => ''])->fails());
}

private function validateProduct($overrides = [])
{
    $validator = Validator::make(
        array_merge($this->validProductData(), $overrides),
        (new ProductRequest())->rules()
    );

    return $validator;
}
```

### 4. Use Custom Assertions
```php
class TestCase extends BaseTestCase
{
    protected function assertProductEquals($expected, $actual)
    {
        $this->assertEquals($expected->name, $actual->name);
        $this->assertEquals($expected->description, $actual->description);
        $this->assertEquals($expected->price, $actual->price);
    }
}
```

### Running Tests
```bash
# Run all tests
php artisan test

# Run specific test file
php artisan test --filter ProductTest

# Run specific test method
php artisan test --filter "ProductTest::it_can_create_a_product"

# Run tests with coverage report
php artisan test --coverage
```

Remember:
1. Always write tests before writing code (TDD approach)
2. Keep tests simple and focused
3. Use meaningful test names
4. Test both success and failure cases
5. Use factories for test data
6. Clean up after tests
7. Test edge cases
8. Keep tests independent
9. Use meaningful assertions
10. Document complex test scenarios
